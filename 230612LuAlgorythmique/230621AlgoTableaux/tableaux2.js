console.log(" - TABLEAUX 2 - ");


console.log("E2-1");
// √âcrire une fonction qui prend un tableau en entr√©e et affiche le dernier √©l√©ment de ce tableau.
let tab = [10, 20, 3];

function ftab(){
    // tab3 = [1, 2, 3];  // !!!!! non non non 
    console.log(tab[2]);
} 

ftab(tab);




/*
D√©but de correction de tableaux2.js :
// √âcrire une fonction qui prend un tableau en entr√©e et affiche le dernier √©l√©ment de ce tableau.
function displayLast(t) {
    let indexOfLastCell = t.length - 1;
    console.log(t[indexOfLastCell]);
}



*/

console.log("correction");

function displayLast(t) {
    let indexOfLastCell = t.length - 1; // Cette ligne calcule l'index du dernier element dans le tableau 't'. 
    // la propri√©t√© length donne le nb d'elements dans le tab. 
    //  puisque les indices du tab commencent √† z√©ro, soustraire 1 √† la longueur donne l'index du denier √©l√©ment (???).

    console.log(t[indexOfLastCell]); // passer par la variable indexOfLastCell est obligatoire pour acc√©der √† l'int√©rieur du tableau. 
}

//  En exter, on peut appeler le tab. 
let t = [34, 12, 78, 34, 95];
displayLast(t);

/*




*/ 
console.log("E2-2");
// √âcrire une fonction qui prend un tableau en entr√©e et retourne 
// le dernier √©l√©ment de ce tableau.

function ftab2() {
    return tab[2];  // C'est toujours pas √ßa !!!
}

console.log (ftab2(tab));




console.log("Correc2");

function displayLastReturn(t){
    let indexOfLastCell = t.length - 1; 
    return t[indexOfLastCell];
}

console.log(displayLastReturn(t));


console.log("E2-3");

// √âcrire une fonction qui prend en entr√©e un tableau 
// et qui retourne le minimum de ce tableau.

// D√©claration de tab, pour la post√©rit√©
tab = [12, 20, 3, 12, 91, 10];


// function returnMinimum(tab) {
//     // let 
//     // for (i = 0 ; i < tab.length ; i++){
//     tabMinimum = Math.min(tab.length);
//     return tab[tabMinimum];
//     // }
// }

// console.log(returnMinimum(tab));




function returnMinimum(tab) {
  return Math.min(...tab);
}


console.log(returnMinimum(tab));

console.log("üòñ");


function returnMini(tab) {
    let valeurMinimum = tab[0];
    for (let i = 0 ; i < tab.length ; i++ ) {
        
        if (tab[i] < valeurMinimum) { // ici aussi ! Pas 'i' ! M√™me si √ßa marchait lol. 
            valeurMinimum = tab[i];  // juste i = 0 ; cibler une valeur du tab = [i]
        }
    // return valeurMinimum -‚ñ∫ !!! pas ici !!! Retourne index 0. 
    }
    return valeurMinimum; 
}

console.log(returnMini(tab));

console.log("ü§Ø")

/*
function euclide(a,b) {
    if (b==0){
        return a;
    } else { 
        return euclide(b, a%b);
    }
}

console.log(euclide(6,10));
console.log(6%10);
*/
// function ftab3(a,b) {
//     b = tab[0];

//     // for (i = 0 ; i <tab.length ; i++){
//     //     console.log(tab[i]);
//         if (b==0) {
//             return a;
//         } else {
//             return ftab3(b, a%i)
//         }
//     // }
    
// }

// ftab3();


console.log("Ex2-4");
// √âcrire une fonction qui prend en entr√©e un tableau et qui retourne le maximum de ce tableau.

function maximumValue(tab) {
    let maximum = tab[0] ; // tab[0] et pas [i] parce que point de d√©part. 
    for (let i = 0 ; i < tab.length ; i++) {
        if (tab[i] > maximum) {
            maximum = tab[i];
        }
    }
    return maximum; 
}
console.log(maximumValue(tab));


// [Plus difficile - bonus] √âcrire une fonction qui prend en entr√©e 
// un tableau de nombres positifs et qui retourne 
// la deuxi√®me plus grande valeur du tableau.



// √âcrire une fonction qui prend en entr√©e 
// un tableau et un nombre et qui retourne 
// le nombre de fois que ce nombre appara√Æt dans le tableau.

console.log("Ex2-5");

/*
On veut une fonction qui prend en entr√©e un tableau + un nb. 
Simple.
La fonction doit : retourner le nb de fois qu'on voit appara√Ætre le nombre
entr√© / ses occurences.

D√©j√†, on doit entrer un tableau et un nb dans l'entr√©e de la fonction. 
On va devoir parcourir le tableau utilis√©.
    boucle for.
On va forc√©ment devoir utiliser une condition : 
    par exemple, SI on lit telle valeur, on augmente le nb d'occurences ; 
    cette occurence serait donc une autre valeur, associ√©e √† une variable donn√©e!



*/
tab = [12, 20, 3, 12, 91, 10, 12];
let n = 12; 
function countTheNumber(tab, n) {
    let count = 0; 
    for (let i = 0 ; i < tab.length ; i++) {
        if (tab[i] == n) {   // Ne pas oublier : *! '==' !* ‚Üí valeur num√©raire ? 
            count++; 
        } 
    }
    return count; 
}
let occurences = countTheNumber(tab, n); // !!! cr√©er une nouvelle variable pour int√©grer la valeur de la fonction cf. ? 
console.log(occurences);


console.log("üí™üòÜ");

console.log("Exo 2-6");
// √âcrire une fonction qui prend en entr√©e un tableau 
// et un nombre et qui retourne true si le nombre existe 
// dans le tableau, false sinon.






// [Bonus] Suite de l'exo : on **sait** que le tableau re√ßu est tri√© (on ne le v√©rifie pas). Comment exploiter cette information pour am√©liorer la recherche d'un √©l√©ment ?

// Cr√©er un tableau qui contient [1,2,3,...,7777].

// Cr√©er un tableau qui contient [10,20,30,...,77770].

// En se servant du tableau pr√©c√©dent, cr√©er un tableau qui contient [5,10,15,...,38885].

// √âcrire une fonction qui prend un tableau en entr√©e et qui en supprime les derni√®res valeurs, tant qu'elles sont inf√©rieures √† 50.
// console.log(leNomDeVotreFonction([1,45,88,54,23,-100,12])); // doit afficher [1,45,88,54]







/*
>>> CORREC <<<

D√©but de correction de tableaux2.js :
// √âcrire une fonction qui prend un tableau en entr√©e et affiche le dernier √©l√©ment de ce tableau.
function displayLast(t) {
    let indexOfLastCell = t.length - 1;
    console.log(t[indexOfLastCell]);
}

displayLast([1,4,-2,0]);
displayLast([10,20,30]);

// √âcrire une fonction qui prend un tableau en entr√©e et retourne le dernier √©l√©ment de ce tableau.
function returnLast(t) {
    return t[t.length-1];
}

console.log(returnLast([1,4,-2,1]));
console.log(returnLast([10,20,31]));



*/