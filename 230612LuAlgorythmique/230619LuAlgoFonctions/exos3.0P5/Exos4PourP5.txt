Pierre ‚Äî 15/06/2023 17:22
Pour ceux qui veulent tenter d'utiliser p5 (apr√®s avoir bien avanc√© dans les exos "classiques" !)
Pierre ‚Äî 15/06/2023 17:23
Le site officiel : https://p5js.org/
home | p5.js
p5.js a JS client-side library for creating graphic and interactive experiences, based on the core principles of Processing.
Il y a notamment une documentation, utile quand on cherche des informations sur un outil en particulier.
On peut travailler directement dans un √©diteur en ligne (c'est le lien "editor" sur le site) : https://editor.p5js.org/
En se cr√©ant un compte sur le site (on peut utiliser google ou github), on peut enregistrer nos projets, et les retrouver facilement.
J'ai √©crit (un peu rapidement üò¨) un petit programme pour vous faire une mini d√©mo de ce que l'on peut faire avec l'outil.
Ce programme est d√©coup√© en 9 parties (pour essayer de ne pas tout avoir d'un coup)
Partie 1 :
/*
Le but de p5.js est de faire assez simplement des dessins/animations, en js.
Cet exemple permet de montrer les fonctionnalit√©s principales.
*/

/* Le code √©crit dans la fonction setup (m√™me si on ne sait pas encore exactement ce qu'est une fonction !) est le code qui sera lanc√© automatiquement par p5 lorsque le dessin va d√©marrer (quand on cliquera sur la fl√®che, en haut).
On peut constater, que l'affichage de "Setup" ne se fait qu'une fois (on retrouve la console en bas du code).
*/
function setup() {
  console.log("Setup");
  createCanvas(400, 400);
}


function draw() {
  background(220);
}
Partie 2 
/*
Le but de p5.js est de faire assez simplement des dessins/animations, en js.
Cet exemple permet de montrer les fonctionnalit√©s principales.
*/

/* Le code √©crit dans la fonction setup (m√™me si on ne sait pas encore exactement ce qu'est une fonction !) est le code qui sera lanc√© automatiquement par p5 lorsque le dessin va d√©marrer (quand on cliquera sur la fl√®che, en haut).
On peut constater, que l'affichage de "Setup" ne se fait qu'une fois (on retrouve la console en bas du code).
*/
function setup() {
  console.log("Setup");
  createCanvas(400, 400);
}

/* Le code de la fonction draw est ex√©cut√© automatiquement par p5, apr√®s le setup, **en boucle √† l'infini**.
Autrement dit, d√®s que le setup est termin√©, l'ordinateur va faire :
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
...

On peut constater ce comportement avec le console.log("Draw");
*/
function draw() {
  console.log("Draw");
  background(220);
}
Partie 3 :
/*
Le but de p5.js est de faire assez simplement des dessins/animations, en js.
Cet exemple permet de montrer les fonctionnalit√©s principales.
*/

/* Le code √©crit dans la fonction setup (m√™me si on ne sait pas encore exactement ce qu'est une fonction !) est le code qui sera lanc√© automatiquement par p5 lorsque le dessin va d√©marrer (quand on cliquera sur la fl√®che, en haut).
On peut constater, que l'affichage de "Setup" ne se fait qu'une fois (on retrouve la console en bas du code).
*/
function setup() {
  console.log("Setup");
  
  // Cr√©er une zone de dessin de 600px x 400px
  createCanvas(600, 400);
}

/* Le code de la fonction draw est ex√©cut√© automatiquement par p5, apr√®s le setup, **en boucle √† l'infini**.
Autrement dit, d√®s que le setup est termin√©, l'ordinateur va faire :
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
...

On peut constater ce comportement avec le console.log("Draw");
*/
function draw() {
  console.log("Draw");
  
  // Remplir le dessin d'une couleur unique.
  // Un nombre = nuance de gris
  // Trois nombres = RGB
  // Quatre nombres = RGBa
  //background(220);
  background(255,200,0);
  
  // Changer la couleur du crayon : je veux dessiner en vert maintenant
  stroke(0,255,0);
  
  // Un point vert (si si, il est bien l√†)
  point(200,100);
}
Pierre ‚Äî 15/06/2023 17:30
Partie 4 :
/* Le code √©crit dans la fonction setup (m√™me si on ne sait pas encore exactement ce qu'est une fonction !) est le code qui sera lanc√© automatiquement par p5 lorsque le dessin va d√©marrer (quand on cliquera sur la fl√®che, en haut).
On peut constater, que l'affichage de "Setup" ne se fait qu'une fois (on retrouve la console en bas du code).
*/
function setup() {
  console.log("Setup");
  
  // Cr√©er une zone de dessin de 600px x 400px
  createCanvas(600, 400);
}

/* Le code de la fonction draw est ex√©cut√© automatiquement par p5, apr√®s le setup, **en boucle √† l'infini**.
Autrement dit, d√®s que le setup est termin√©, l'ordinateur va faire :
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
...

On peut constater ce comportement avec le console.log("Draw");
*/
function draw() {
  console.log("Draw");
  
  // Remplir le dessin d'une couleur unique.
  // Un nombre = nuance de gris
  // Trois nombres = RGB
  // Quatre nombres = RGBa
  //background(220);
  background(255,200,0);
  
  // Changer la couleur du crayon : je veux dessiner en vert maintenant
  stroke(0,255,0);
  
  // Un point vert (si si, il est bien l√†)
  point(200,100);
  
  // Changer la taille du crayon
  strokeWeight(10);
  point(300, 350);
  
  // Il ne faut pas oublier que l'ordinateur fait plein de fois le `draw` chaque seconde (cf le console.log) ! Donc comme √† la fin du premier dessin (de la premi√®re frame de l'animation) je prends un gros crayon, j'ai encore ce gros crayon en main quand je fais le premier point, en haut !
  // Donc d√®s la deuxi√®me image (au bout de quelques dizaines de millisecondes, le premier point est aussi gros que le deuxi√®me.
}
Partie 5 :
function setup() {
  console.log("Setup");
  
  // Cr√©er une zone de dessin de 600px x 400px
  createCanvas(600, 400);
}

/* Le code de la fonction draw est ex√©cut√© automatiquement par p5, apr√®s le setup, **en boucle √† l'infini**.
Autrement dit, d√®s que le setup est termin√©, l'ordinateur va faire :
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
...

On peut constater ce comportement avec le console.log("Draw");
*/
function draw() {
  console.log("Draw");
  
  // Remplir le dessin d'une couleur unique.
  // Un nombre = nuance de gris
  // Trois nombres = RGB
  // Quatre nombres = RGBa
  //background(220);
  background(255,200,0);
  
  // Changer la couleur du crayon : je veux dessiner en vert maintenant
  stroke(0,255,0);
  
  // Un point vert (si si, il est bien l√†)
  point(200,100);
  
  // Changer la taille du crayon
  strokeWeight(10);
  point(300, 350);
  
  // Il ne faut pas oublier que l'ordinateur fait plein de fois le `draw` chaque seconde (cf le console.log) ! Donc comme √† la fin du premier dessin (de la premi√®re frame de l'animation) je prends un gros crayon, j'ai encore ce gros crayon en main quand je fais le premier point, en haut !
  // Donc d√®s la deuxi√®me image (au bout de quelques dizaines de millisecondes, le premier point est aussi gros que le deuxi√®me.
  
  // Faire une ligne
  line(50, 50, 100, 25);
  
  // Faire un cercle
  circle(400,200, 50);
  // Par d√©faut, les formes ferm√©es sont remplies en blanc.
}
Partie 6 :
function setup() {
  console.log("Setup");
  
  // Cr√©er une zone de dessin de 600px x 400px
  createCanvas(600, 400);
}

/* Le code de la fonction draw est ex√©cut√© automatiquement par p5, apr√®s le setup, **en boucle √† l'infini**.
Autrement dit, d√®s que le setup est termin√©, l'ordinateur va faire :
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
- faire une fois le code dans draw
- afficher le r√©sultat √† l'√©cran
...

On peut constater ce comportement avec le console.log("Draw");
*/
function draw() {
  console.log("Draw");
  
  // Remplir le dessin d'une couleur unique.
  // Un nombre = nuance de gris
  // Trois nombres = RGB
  // Quatre nombres = RGBa
  //background(220);
  background(255,200,0);
  
  // Changer la couleur du crayon : je veux dessiner en vert maintenant
  stroke(0,255,0);
  
  // Un point vert (si si, il est bien l√†)
  point(200,100);
  
  // Changer la taille du crayon
  strokeWeight(10);
  point(300, 350);
  
  // Il ne faut pas oublier que l'ordinateur fait plein de fois le `draw` chaque seconde (cf le console.log) ! Donc comme √† la fin du premier dessin (de la premi√®re frame de l'animation) je prends un gros crayon, j'ai encore ce gros crayon en main quand je fais le premier point, en haut !
  // Donc d√®s la deuxi√®me image (au bout de quelques dizaines de millisecondes, le premier point est aussi gros que le deuxi√®me.
  
  // Faire une ligne
  line(50, 50, 100, 25);
  
  // Faire un cercle
  circle(400,200, 50);
  // Par d√©faut, les formes ferm√©es sont remplies en blanc.
  
  // On peut choisir la couleur de remplissage avec fill (m√™me principe que le background, pour la couleur) :
  fill(255,0,0);
  circle(300,200,50);
  // Ou bien d√©sactiver totalement le remplissage :
  noFill();
  circle(200, 100, 150);
}
Partie 7 :
function setup() {
  console.log("Setup");
  
  // Cr√©er une zone de dessin de 600px x 400px
  createCanvas(600, 400);
}

function draw() {
  console.log("Draw");
  
  // Remplir le dessin d'une couleur unique.
  // Un nombre = nuance de gris
  // Trois nombres = RGB
  // Quatre nombres = RGBa
  //background(220);
  background(255,200,0);
  
  // Changer la couleur du crayon : je veux dessiner en vert maintenant
  stroke(0,255,0);
  
  // Un point vert (si si, il est bien l√†)
  point(200,100);
  
  // Changer la taille du crayon
  strokeWeight(10);
  point(300, 350);
  
  // Il ne faut pas oublier que l'ordinateur fait plein de fois le `draw` chaque seconde (cf le console.log) ! Donc comme √† la fin du premier dessin (de la premi√®re frame de l'animation) je prends un gros crayon, j'ai encore ce gros crayon en main quand je fais le premier point, en haut !
  // Donc d√®s la deuxi√®me image (au bout de quelques dizaines de millisecondes, le premier point est aussi gros que le deuxi√®me.
  
  // Faire une ligne
  line(50, 50, 100, 25);
  
  // Faire un cercle
  circle(400,200, 50);
  // Par d√©faut, les formes ferm√©es sont remplies en blanc.
  
  // On peut choisir la couleur de remplissage avec fill (m√™me principe que le background, pour la couleur) :
  fill(255,0,0);
  circle(300,200,50);
  // Ou bien d√©sactiver totalement le remplissage :
  noFill();
  circle(200, 100, 150);
  
  // Ellipse (cercle d√©form√©)
  ellipse(500, 300, 200, 100);
  
  // Carr√©
  square(30, 200, 50);
  
  // Rectangle
  rect(300, 80, 200, 50);
}
Partie 8 :
function setup() {
  console.log("Setup");
  
  // Cr√©er une zone de dessin de 600px x 400px
  createCanvas(600, 400);
}

function draw() {
  console.log("Draw");
  
  // Remplir le dessin d'une couleur unique.
  // Un nombre = nuance de gris
  // Trois nombres = RGB
  // Quatre nombres = RGBa
  //background(220);
  background(255,200,0);
  
  // Changer la couleur du crayon : je veux dessiner en vert maintenant
  stroke(0,255,0);
  
  // Un point vert (si si, il est bien l√†)
  point(200,100);
  
  // Changer la taille du crayon
  strokeWeight(10);
  point(300, 350);
  
  // Il ne faut pas oublier que l'ordinateur fait plein de fois le `draw` chaque seconde (cf le console.log) ! Donc comme √† la fin du premier dessin (de la premi√®re frame de l'animation) je prends un gros crayon, j'ai encore ce gros crayon en main quand je fais le premier point, en haut !
  // Donc d√®s la deuxi√®me image (au bout de quelques dizaines de millisecondes, le premier point est aussi gros que le deuxi√®me.
  
  // Faire une ligne
  line(50, 50, 100, 25);
  
  // Faire un cercle
  circle(400,200, 50);
  // Par d√©faut, les formes ferm√©es sont remplies en blanc.
  
  // On peut choisir la couleur de remplissage avec fill (m√™me principe que le background, pour la couleur) :
  fill(255,0,0);
  circle(300,200,50);
  // Ou bien d√©sactiver totalement le remplissage :
  noFill();
  circle(200, 100, 150);
  
  // Ellipse (cercle d√©form√©)
  ellipse(500, 300, 200, 100);
  
  // Carr√©
  square(30, 200, 50);
  
  // Rectangle
  rect(300, 80, 200, 50);
}


// Le code de la function mouseClicked sera ex√©cut√© automatiquement quand l'utilisateur cliquera dans le dessin (et aussit√¥t apr√®s, les `draw` reprendront).
function mouseClicked() {
  console.log("Clic !");
}
Partie 9 :
function setup() {
  console.log("Setup");
  
  // Cr√©er une zone de dessin de 600px x 400px
  createCanvas(600, 400);
}

function draw() {
  console.log("Draw");
  
  // Remplir le dessin d'une couleur unique.
  // Un nombre = nuance de gris
  // Trois nombres = RGB
  // Quatre nombres = RGBa
  //background(220);
  background(255,200,0);
  
  // Changer la couleur du crayon : je veux dessiner en vert maintenant
  stroke(0,255,0);
  
  // Un point vert (si si, il est bien l√†)
  point(200,100);
  
  // Changer la taille du crayon
  strokeWeight(10);
  point(300, 350);
  
  // Il ne faut pas oublier que l'ordinateur fait plein de fois le `draw` chaque seconde (cf le console.log) ! Donc comme √† la fin du premier dessin (de la premi√®re frame de l'animation) je prends un gros crayon, j'ai encore ce gros crayon en main quand je fais le premier point, en haut !
  // Donc d√®s la deuxi√®me image (au bout de quelques dizaines de millisecondes, le premier point est aussi gros que le deuxi√®me.
  
  // Faire une ligne
  line(50, 50, 100, 25);
  
  // Faire un cercle
  circle(400,200, 50);
  // Par d√©faut, les formes ferm√©es sont remplies en blanc.
  
  // On peut choisir la couleur de remplissage avec fill (m√™me principe que le background, pour la couleur) :
  fill(255,0,0);
  circle(300,200,50);
  // Ou bien d√©sactiver totalement le remplissage :
  noFill();
  circle(200, 100, 150);
  
  // Ellipse (cercle d√©form√©)
  ellipse(500, 300, 200, 100);
  
  // Carr√©
  square(30, 200, 50);
  
  // Rectangle
  rect(300, 80, 200, 50);
  
  // p5 nous fournit deux variables qui contiennent les coordonn√©es de la souris dans le dessin.
  // Pas besoin de les cr√©er ni de les modifier, p5 le fait pour nous !
  stroke(0,0,255);
  point(mouseX, mouseY);
}


// Le code de la function mouseClicked sera ex√©cut√© automatiquement quand l'utilisateur cliquera dans le dessin (et aussit√¥t apr√®s, les `draw` reprendront).
function mouseClicked() {
  console.log("Clic !");
}
C'est le m√™me fichier, mais construit incr√©mentalement !
Pour vous entra√Æner en p5, vous pouvez dessiner un peu ce que vous voulez. Je vous donne quelques exemples :
une ligne de carr√©s noirs sur fond blanc
plusieurs lignes de carr√©s noirs sur fond blanc
un point qui appara√Æt √† un endroit al√©atoire de l'√©cran (https://p5js.org/reference/#/p5/random)
une balle qui se d√©place
une balle qui se d√©place en rebondissant sur les murs
un poisson dans un aquarium
 